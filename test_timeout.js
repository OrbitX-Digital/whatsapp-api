const axios = require('axios');

async function testTimeout() {
  console.log('Testando configura√ß√£o de timeout...');
  
  try {
    // Teste 1: Endpoint que deve responder rapidamente
    console.log('\n1. Testando endpoint de health (deve responder rapidamente):');
    const start1 = Date.now();
    const response1 = await axios.get('http://localhost:3000/api-docs', {
      timeout: 5000 // 5 segundos
    });
    const end1 = Date.now();
    console.log(`‚úÖ Resposta em ${end1 - start1}ms`);
    
    // Teste 2: Endpoint que pode demorar mais (simulando opera√ß√£o longa)
    console.log('\n2. Testando endpoint de grupos (pode demorar mais):');
    const start2 = Date.now();
    const response2 = await axios.get('http://localhost:3000/contact/activeGroups/test123', {
      timeout: 200000 // 3 minutos e 20 segundos
    });
    const end2 = Date.now();
    console.log(`‚úÖ Resposta em ${end2 - start2}ms`);
    console.log(`üìä Total de grupos: ${response2.data.result?.length || 0}`);
    
    console.log('\n‚úÖ Teste de timeout conclu√≠do com sucesso!');
    console.log('üìù O servidor agora est√° configurado com timeout de 3 minutos.');
    
  } catch (error) {
    if (error.code === 'ECONNABORTED') {
      console.log('‚ùå Timeout atingido - o servidor ainda est√° com timeout baixo');
    } else if (error.response) {
      console.log(`‚ö†Ô∏è Erro HTTP ${error.response.status}: ${error.response.statusText}`);
      console.log('üìù Isso pode ser normal se a sess√£o n√£o estiver conectada');
    } else {
      console.log(`‚ùå Erro: ${error.message}`);
    }
  }
}

testTimeout(); 